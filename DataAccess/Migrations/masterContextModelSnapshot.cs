// <auto-generated />
using System;
using DataAccess.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(PublishContext))]
    partial class masterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BusinessLogic.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdAuthor")
                        .HasColumnType("int")
                        .HasColumnName("id_author");

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime")
                        .HasColumnName("publish_date");

                    b.HasKey("Id")
                        .HasName("articles_pk")
                        .IsClustered(false);

                    b.HasIndex("IdAuthor");

                    b.ToTable("articles", "dbadmin");
                });

            modelBuilder.Entity("BusinessLogic.Entities.ArticleTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdArticle")
                        .HasColumnType("int")
                        .HasColumnName("id_article");

                    b.Property<int?>("IdTag")
                        .HasColumnType("int")
                        .HasColumnName("id_tag");

                    b.HasKey("Id")
                        .HasName("article_tags_pk")
                        .IsClustered(false);

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdTag");

                    b.ToTable("article_tags", "dbadmin");
                });

            modelBuilder.Entity("BusinessLogic.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime")
                        .HasColumnName("join_date");

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("authors_pk")
                        .IsClustered(false);

                    b.ToTable("authors", "dbadmin");
                });

            modelBuilder.Entity("BusinessLogic.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("tags_pk")
                        .IsClustered(false);

                    b.ToTable("tags", "dbadmin");

                    b
                        .HasComment("desc tags for articles");
                });

            modelBuilder.Entity("BusinessLogic.Entities.Text", b =>
                {
                    b.Property<bool?>("AdultOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("adult_only")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Data")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("data");

                    b.Property<int>("IdArticle")
                        .HasColumnType("int")
                        .HasColumnName("id_article");

                    b.Property<int?>("ReaderRating")
                        .HasColumnType("int")
                        .HasColumnName("reader_rating");

                    b.HasIndex(new[] { "IdArticle" }, "texts_id_article_uindex")
                        .IsUnique();

                    b.ToTable("texts", "dbadmin");
                });

            modelBuilder.Entity("BusinessLogic.Entities.Article", b =>
                {
                    b.HasOne("BusinessLogic.Entities.Author", "IdAuthorNavigation")
                        .WithMany("Articles")
                        .HasForeignKey("IdAuthor")
                        .HasConstraintName("articles_authors_id_fk")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdAuthorNavigation");
                });

            modelBuilder.Entity("BusinessLogic.Entities.ArticleTag", b =>
                {
                    b.HasOne("BusinessLogic.Entities.Article", "IdArticleNavigation")
                        .WithMany("ArticleTags")
                        .HasForeignKey("IdArticle")
                        .HasConstraintName("article_tags_articles_id_fk")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BusinessLogic.Entities.Tag", "IdTagNavigation")
                        .WithMany("ArticleTags")
                        .HasForeignKey("IdTag")
                        .HasConstraintName("article_tags_tags_id_fk")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdArticleNavigation");

                    b.Navigation("IdTagNavigation");
                });

            modelBuilder.Entity("BusinessLogic.Entities.Text", b =>
                {
                    b.HasOne("BusinessLogic.Entities.Article", "IdArticleNavigation")
                        .WithOne()
                        .HasForeignKey("BusinessLogic.Entities.Text", "IdArticle")
                        .HasConstraintName("texts_articles_id_fk")
                        .IsRequired();

                    b.Navigation("IdArticleNavigation");
                });

            modelBuilder.Entity("BusinessLogic.Entities.Article", b =>
                {
                    b.Navigation("ArticleTags");
                });

            modelBuilder.Entity("BusinessLogic.Entities.Author", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("BusinessLogic.Entities.Tag", b =>
                {
                    b.Navigation("ArticleTags");
                });
#pragma warning restore 612, 618
        }
    }
}
